#!/usr/bin/env python3
"""
ChArUco/AprilTag-based camera calibration.
Writes: camera_intrinsics.yaml  (K, dist, image_size, rms)

Usage (LIVE):
  python -m fiducial_system.tools.calibrate --mode live --source 0 \
    --dict april_36h11 --squares_x 7 --squares_y 10 --square_mm 30 --marker_mm 22 \
    --display --output config/camera_intrinsics.yaml

Usage (FOLDER):
  python -m fiducial_system.tools.calibrate --mode folder --images "data/calib/*.jpg" \
    --dict april_36h11 --squares_x 7 --squares_y 10 --square_mm 30 --marker_mm 22 \
    --output config/camera_intrinsics.yaml
"""
import argparse
import glob
import sys
import cv2
import numpy as np

# ---- AprilTag-enabled ArUco dictionaries (OpenCV contrib) ----
ARUCO_DICTS = {
    "april_16h5":  cv2.aruco.DICT_APRILTAG_16h5,
    "april_25h9":  cv2.aruco.DICT_APRILTAG_25h9,
    "april_36h10": cv2.aruco.DICT_APRILTAG_36h10,
    "april_36h11": cv2.aruco.DICT_APRILTAG_36h11,
    "4x4_50":      cv2.aruco.DICT_4X4_50,
    "5x5_100":     cv2.aruco.DICT_5X5_100,
    "6x6_250":     cv2.aruco.DICT_6X6_250,
    "7x7_50":      cv2.aruco.DICT_7X7_50,
}

def _save_yaml(path, K, dist, imsize, rms):
    fs = cv2.FileStorage(path, cv2.FILE_STORAGE_WRITE)
    if not fs.isOpened():
        raise SystemExit(f"Cannot write YAML to {path}")
    fs.write("K", K)
    fs.write("dist", dist)
    fs.write("image_width", int(imsize[0]))
    fs.write("image_height", int(imsize[1]))
    fs.write("rms", float(rms))
    fs.release()
    print(f"[OK] wrote {path}\n  rms={rms:.4f}\n  size={imsize[0]}x{imsize[1]}")

def _make_board(args):
    dictionary = cv2.aruco.getPredefinedDictionary(ARUCO_DICTS[args.dict])
    board = cv2.aruco.CharucoBoard(
        (args.squares_x, args.squares_y),
        squareLength=args.square_mm/1000.0,
        markerLength=args.marker_mm/1000.0,
        dictionary=dictionary
    )
    detector = cv2.aruco.ArucoDetector(dictionary, cv2.aruco.DetectorParameters())
    return board, detector

def _calibrate(all_corners, all_ids, imsize, board):
    if len(all_corners) < 10:
        raise SystemExit("Need at least 10 accepted views (20â€“40 recommended).")
    camera_matrix = np.eye(3, dtype=np.float64)
    dist_coeffs  = np.zeros((5,1), dtype=np.float64)
    flags = 0
    rms, K, dist, rvecs, tvecs = cv2.aruco.calibrateCameraCharuco(
        charucoCorners=all_corners,
        charucoIds=all_ids,
        board=board,
        imageSize=imsize,
        cameraMatrix=camera_matrix,
        distCoeffs=dist_coeffs,
        flags=flags
    )
    return rms, K, dist

def _run_live(args):
    board, detector = _make_board(args)
    src = int(args.source) if args.source.isdigit() else args.source
    cap = cv2.VideoCapture(src)
    if not cap.isOpened():
        raise SystemExit(f"Could not open source {args.source}")

    all_corners, all_ids = [], []
    imsize, accepted = None, 0
    print("Controls: SPACE=accept  c=calibrate  q=quit")
    while True:
        ok, frame = cap.read()
        if not ok: break
        if imsize is None:
            imsize = frame.shape[:2][::-1]
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        corners, ids, _ = detector.detectMarkers(gray)

        msg = f"Accepted {accepted}"
        ch_corners = ch_ids = None
        good = False
        if ids is not None and len(ids) > 0:
            if args.display:
                cv2.aruco.drawDetectedMarkers(frame, corners, ids)
            ret, ch_corners, ch_ids = cv2.aruco.interpolateCornersCharuco(
                markerCorners=corners, markerIds=ids, image=gray, board=board
            )
            good = bool(ret and ch_corners is not None and ch_ids is not None and len(ch_corners) > 8)

        if args.display:
            cv2.putText(frame, msg, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255,255,255), 2)
            cv2.imshow("ChArUco Calibration", frame)
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'): break
        elif key == ord(' '):
            if good:
                all_corners.append(ch_corners)
                all_ids.append(ch_ids)
                accepted += 1
                print(f"[+] accepted view #{accepted} ({len(ch_corners)} corners)")
            else:
                print("[-] board not good in this frame")
        elif key == ord('c'):
            if imsize is None:
                print("No frames yet.")
                continue
            rms, K, dist = _calibrate(all_corners, all_ids, imsize, board)
            _save_yaml(args.output, K, dist, imsize, rms)
    cap.release()
    if args.display: cv2.destroyAllWindows()

def _run_folder(args):
    board, detector = _make_board(args)
    files = sorted(glob.glob(args.images))
    if not files:
        raise SystemExit(f"No images match: {args.images}")

    all_corners, all_ids = [], []
    imsize = None
    for fp in files:
        img = cv2.imread(fp)
        if img is None: continue
        if imsize is None: imsize = img.shape[:2][::-1]
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        corners, ids, _ = detector.detectMarkers(gray)
        if ids is None or len(ids) == 0: continue
        ret, ch_corners, ch_ids = cv2.aruco.interpolateCornersCharuco(
            markerCorners=corners, markerIds=ids, image=gray, board=board
        )
        if ret and ch_corners is not None and ch_ids is not None and len(ch_corners) > 12:
            all_corners.append(ch_corners)
            all_ids.append(ch_ids)

    if imsize is None:
        raise SystemExit("No valid images.")
    rms, K, dist = _calibrate(all_corners, all_ids, imsize, board)
    _save_yaml(args.output, K, dist, imsize, rms)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--mode", choices=["live", "folder"], default="live")
    ap.add_argument("--output", default="config/camera_intrinsics.yaml")
    ap.add_argument("--dict", default="april_36h11")
    ap.add_argument("--squares_x", type=int, default=7)
    ap.add_argument("--squares_y", type=int, default=10)
    ap.add_argument("--square_mm", type=float, default=30.0)
    ap.add_argument("--marker_mm", type=float, default=22.0)
    ap.add_argument("--display", action="store_true")
    # live
    ap.add_argument("--source", default="0")
    # folder
    ap.add_argument("--images", help="glob like 'data/calib/*.jpg'")
    args = ap.parse_args()

    if args.mode == "live":
        _run_live(args)
    else:
        if not args.images:
            print("--images is required for --mode folder", file=sys.stderr)
            sys.exit(2)
        _run_folder(args)

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
Generate a printable ChArUco board (chessboard + ArUco/AprilTag markers).
Print at 100% scale. Measure one square to verify mm.
"""
import argparse, cv2

ARUCO_DICTS = {
    "april_16h5":  cv2.aruco.DICT_APRILTAG_16h5,
    "april_25h9":  cv2.aruco.DICT_APRILTAG_25h9,
    "april_36h10": cv2.aruco.DICT_APRILTAG_36h10,
    "april_36h11": cv2.aruco.DICT_APRILTAG_36h11,
    "4x4_50":      cv2.aruco.DICT_4X4_50,
    "5x5_100":     cv2.aruco.DICT_5X5_100,
    "6x6_250":     cv2.aruco.DICT_6X6_250,
    "7x7_50":      cv2.aruco.DICT_7X7_50,
}

def mm_to_px(mm, dpi): return int(round(mm/25.4*dpi))

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--dict", default="april_36h11")
    ap.add_argument("--squares_x", type=int, default=7)
    ap.add_argument("--squares_y", type=int, default=10)
    ap.add_argument("--square_mm", type=float, default=30.0)
    ap.add_argument("--marker_mm", type=float, default=22.0)
    ap.add_argument("--dpi", type=int, default=300)
    ap.add_argument("--out", default="board_charuco.png")
    args = ap.parse_args()

    dictionary = cv2.aruco.getPredefinedDictionary(ARUCO_DICTS[args.dict])
    board = cv2.aruco.CharucoBoard(
        (args.squares_x, args.squares_y),
        squareLength=args.square_mm/1000.0,
        markerLength=args.marker_mm/1000.0,
        dictionary=dictionary
    )
    img = board.generateImage((
        mm_to_px(args.squares_x*args.square_mm, args.dpi),
        mm_to_px(args.squares_y*args.square_mm, args.dpi)
    ))
    cv2.imwrite(args.out, img)
    print(f"Saved {args.out} ({args.squares_x}x{args.squares_y} squares). Print at 100% scale.")
if __name__ == "__main__":
    main()
python -m fiducial_system.tools.make_charuco_board --dict april_36h11 \
  --squares_x 7 --squares_y 10 --square_mm 30 --marker_mm 22 --dpi 300 --out board_charuco.png

python -m fiducial_system.tools.calibrate --mode live --source 0 \
  --dict april_36h11 --squares_x 7 --squares_y 10 --square_mm 30 --marker_mm 22 \
  --display --output config/camera_intrinsics.yaml
